name: Build

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  macos:
    runs-on: macos-latest

    strategy:
      matrix:
        include:
          - build: 'metal'
            defines: '-DLLAMA_NATIVE=OFF -DLLAMA_FAST=ON -DLLAMA_BUILD_SERVER=ON -DBUILD_SHARED_LIBS=ON'
          - build: 'nometal'
            defines: '-DLLAMA_NATIVE=OFF -DLLAMA_FAST=ON -DLLAMA_BUILD_SERVER=ON -DBUILD_SHARED_LIBS=ON -DLLAMA_NO_METAL=1'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          repository: ggerganov/llama.cpp

      - name: Compile with cmake.
        run: |
          mkdir build
          cd build
          cmake .. ${{ matrix.defines }}
          cmake --build . --config Release

      - name: Pack Artifacts
        run: |
          cd build
          mkdir macos-${{ matrix.build }}
          cp -R bin/* macos-${{ matrix.build }}
          ln -s macos-${{ matrix.build }}/main macos-${{ matrix.build }}/llamacpp
          tar -czvf macos-${{ matrix.build }}.tar.gz macos-${{ matrix.build }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          path: |
            build/macos-${{ matrix.build }}.tar.gz
  
  release:
    needs: macos
    runs-on: macos-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.sha }}
          release_name: ${{ github.sha }}
          draft: false
          prerelease: false

      - name: Upload release assets
        run: |
          for file in artifacts/*; do
            echo "Uploading $file"
            curl \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: $(file -b --mime-type $file)" \
              --data-binary @"$file" \
              "${{ steps.create_release.outputs.upload_url }}/assets?name=$(basename $file)"
          done
        shell: bash
  # windows-cpu-only:
  #   runs-on: windows-latest

  #   strategy:
  #     matrix:
  #       include:
  #         - build: 'noavx'
  #           defines: '-DLLAMA_NATIVE=OFF -DLLAMA_FAST=ON -DLLAMA_BUILD_SERVER=ON -DLLAMA_AVX=OFF -DLLAMA_AVX2=OFF -DLLAMA_FMA=OFF -DBUILD_SHARED_LIBS=ON'
  #         - build: 'avx2'
  #           defines: '-DLLAMA_NATIVE=OFF -DLLAMA_FAST=ON -DLLAMA_BUILD_SERVER=ON -DBUILD_SHARED_LIBS=ON'
  #         - build: 'avx'
  #           defines: '-DLLAMA_NATIVE=OFF -DLLAMA_FAST=ON -DLLAMA_BUILD_SERVER=ON -DLLAMA_AVX2=OFF -DBUILD_SHARED_LIBS=ON'
  #         - build: 'avx512'
  #           defines: '-DLLAMA_NATIVE=OFF -DLLAMA_FAST=ON -DLLAMA_BUILD_SERVER=ON -DLLAMA_AVX512=ON -DBUILD_SHARED_LIBS=ON'
  
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
  #       with:
  #         repository: ggerganov/llama.cpp

  #     - name: Compile with cmake.
  #       run: |
  #         mkdir build
  #         cd build
  #         cmake .. ${{ matrix.defines }}
  #         cmake --build . --config Release

  #     - name: Pack Artifacts
  #       run: |
  #         cd build/bin
  #         ls Release

  # windows-cuda:
  #   runs-on: windows-latest

  #   strategy:
  #     matrix:
  #       include:
  #         - build: 'cublas'
  #           defines: '-DLLAMA_NATIVE=OFF -DLLAMA_FAST=ON -DLLAMA_BUILD_SERVER=ON -DLLAMA_CUBLAS=ON -DBUILD_SHARED_LIBS=ON'

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
  #       with:
  #         repository: ggerganov/llama.cpp

  #     - name: Install CUDA
  #       uses: Jimver/cuda-toolkit@v0.2.11
  #       id: cuda-toolkit
  #       with:
  #         cuda: '12.2.0'
  #         method: 'network'
  #         sub-packages: '["nvcc", "cudart", "cublas", "cublas_dev", "thrust", "visual_studio_integration"]'

  #     - name: Compile with cmake.
  #       run: |
  #         mkdir build
  #         cd build
  #         cmake .. ${{ matrix.defines }}
  #         cmake --build . --config Release

  #     - name: Pack Artifacts
  #       run: |
  #         cd build/bin
  #         ls Release